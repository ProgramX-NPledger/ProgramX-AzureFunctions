using System.Collections.Specialized;
using System.Net;
using System.Text;
using System.Text.Json;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Moq;

namespace ProgramX.Azure.FunctionApp.Tests.HttpTriggers;

/// <summary>
/// Using the builder pattern, allows for the creation of a <see cref="TestHttpRequestData"/> instance.
/// </summary>
public class TestableHttpRequestDataBuilder
{
    private HttpStatusCode? _httpStatusCode=null;
    private NameValueCollection _query = new();
    private Uri _url = new("https://localhost");
    private IEnumerable<string> _roles = new List<string>();
    private bool? _useValidAuthorisation = null;
    private object? _payload = null;
    
    /// <summary>
    /// Specifies which HTTP Status Code the response created from the request should return.
    /// </summary>
    /// <param name="httpStatusCode">The <see cref="HttpStatusCode"/> to return.</param>
    /// <returns>A <see cref="TestableHttpRequestDataBuilder"/> which can be used to further
    /// configure the <see cref="TestHttpRequestData"/> that will be generated by
    /// <see cref="Build"/>.</returns>
    public TestableHttpRequestDataBuilder Returns(HttpStatusCode httpStatusCode)
    {
        _httpStatusCode = httpStatusCode;
        return this;
    }

    /// <summary>
    /// Adds valid authentication to the request using a temporary token for the purposes of the test only.
    /// </summary>
    /// <returns></returns>
    public TestableHttpRequestDataBuilder WithAuthentication()
    {
        _useValidAuthorisation = true;
        return this;
    }
    
    /// <summary>
    /// Adds an invalid token to the request to mimic invalid authentication.
    /// </summary>
    /// <returns></returns>
    public TestableHttpRequestDataBuilder WithInvalidAuthentication()
    {
        _useValidAuthorisation = false;
        return this;
    }

    /// <summary>
    /// Grants the specified roles to the user authenticated with the request, for this request only.
    /// </summary>
    /// <param name="roles">The list of role names to grant the user.</param>
    /// <returns></returns>
    public TestableHttpRequestDataBuilder GrantRoles(IEnumerable<string> roles)
    {
        _roles = roles;
        return this;
    }

    /// <summary>
    /// Adds a query-string to the request.
    /// </summary>
    /// <param name="query">A <see cref="NameValueCollection"/> comprising the query parameters.</param>
    /// <returns></returns>
    public TestableHttpRequestDataBuilder WithQuery(NameValueCollection query)
    {
        _query = query;
        return this;
    }
    
    /// <summary>
    /// Sets the URL for the request.
    /// </summary>
    /// <param name="url">The URL to set for the request.</param>
    /// <returns></returns>
    public TestableHttpRequestDataBuilder WithUrl(Uri url)
    {
        _url = url;
        return this;
    }

    /// <summary>
    /// Adds a payload onto the request.
    /// </summary>
    /// <param name="payloadObject">A JSON serializable object which should be injected into the request.</param>
    /// <returns></returns>
    public TestableHttpRequestDataBuilder WithPayload(object payloadObject)
    {
        _payload = payloadObject;
        return this;
    }
    
    /// <summary>
    /// Build the <see cref="TestHttpRequestData"/> instance.
    /// </summary>
    /// <returns></returns>
    public HttpRequestData Build()
    {
        var mockFunctionContext = new Mock<FunctionContext>();
        
        var testHttpRequestData = new TestHttpRequestData(
            mockFunctionContext.Object, 
            _query, 
            _url,
            _httpStatusCode ?? HttpStatusCode.OK,
            _roles,
            _useValidAuthorisation);
        
        if (_payload != null)
        {
            var serializedPayload = JsonSerializer.Serialize(_payload);
            testHttpRequestData.Body.Write(Encoding.UTF8.GetBytes(serializedPayload), 0, serializedPayload.Length);
        }
        return testHttpRequestData;
    }
}